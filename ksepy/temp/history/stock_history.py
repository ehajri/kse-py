from bs4 import BeautifulSoup
import requests


def get(ticker):
    print('Getting history for', ticker)
    parameters = {'ctl00$ContentMatter$txtFrom': '06/04/2017',
                  'ctl00$ContentMatter$txtTo': '06/08/2017',
                  '__EVENTVALIDATION': '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',
                  '__VIEWSTATE': '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',
                  'ctl00$ContentMatter$Button1': 'SHOW',
                  'ctl00$ContentMatter$StockLST': ticker}

    req = requests.post("http://www.boursakuwait.com.kw/History/StockHistory.aspx", parameters)

    print(req.status_code, req.reason)
    data = req.text
    soup = BeautifulSoup(data, "html.parser")

    table = soup.find(id='ContentMatter_HistoryGRID')

    if table is None:
        print('table does not exist')
        exit()

    trs = table.findAll('tr')

    trs.pop(0)

    print("table has", len(trs), "records")