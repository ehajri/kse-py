def News():
    logger.info("%s News Listener started!" % datetime.datetime.now().time())
    pageContent = func.FetchURL(config['news']['url1'])

    records = func.FetchNews(pageContent, config['news']['domId1'])

    if records is None:
        logger.warning("News did not return anything")
        return

    for i in records:
        if NewsExists(i[0], i[2]):
            records.remove(i)

    for i in records:
        i[2] = i[2].strftime('%Y-%m-%d %H:%M:%S')
        pageContent = func.FetchURL(config['news']['url2'] + str(i[0]))
        temp = func.FetchArticle(pageContent, config['news']['domId2'])

        if temp is None:
            logger.warning("%d returned none" % i[0])
        else:
            # print("%d to insert" % i[0])
            i.append(temp)

    fields = "newsid headline date message"

    # do_insert_news(records, fields)
    do_bulk_insert_pw(sm.db.News, records, fields.split(' '))


def NewsExists(article_id, article_date):
    count = sm.db.News.select().where(sm.db.News.id == article_id and sm.db.News.date == article_date).count()
    return count > 0


# not used?


def GetTodays(section):
    table = ''
    if section == 'obook':
        table = 'OBook'

    if table == '':
        print('GetTodays is passed with an invalid section')
        return None

    number_of_rows = 0
    connection = pymysql.connect(host=os.environ['MYSQL_PORT_3306_TCP_ADDR'],
                                 user='root',
                                 passwd=os.environ['MYSQL_ENV_MYSQL_ROOT_PASSWORD'],
                                 db='stock',
                                 charset='utf8',
                                 cursorclass=pymysql.cursors.DictCursor)

    try:
        with connection.cursor() as cursor:
            sql = "SELECT COUNT(*) AS total FROM {0} WHERE `timestamp` > CURRENT_DATE".format(table)
            cursor.execute(sql)
            number_of_rows = cursor.fetchone()['total']

        connection.commit()
    finally:
        connection.close()
        return number_of_rows


def KeysToFields(str):
    list = str.split(' ')
    str = ', '.join("`{0}`".format(w) for w in list)
    return str

# not sure what this is doing


def TimeSale2():
    tickers = GetTickers()

    list = []
    for ticker in tickers:
        pageContent = func.FetchURL(config['timesale']['url'] % ticker['ticker_id'])
        temp = func.FetchTimeSale(pageContent, config['timesale']['domId'])
        if temp:
            for i, a in enumerate(temp):
                a.append(ticker['ticker_id'])
            list = list + temp

    fields = KeysToFields('price quantity datetime ticker_id')
    sql = "INSERT IGNORE INTO `TimeSale` (" + fields + ") VALUES (%s, %s, %s, %s)"

    Store(list, sql)


def TimeSale():
    logger.info("%s TimeSale Listener started!" % datetime.datetime.now().time())

    pageContent = func.FetchURL(config['timesale']['url2'])

    timesalelist = func.FetchTimeSale2(pageContent, config['timesale']['domId2'])

    if timesalelist is None:
        logger.warning("Nothing returned from FetchTimeSale2")
    elif len(list) == 0:
        logger.warning("0 record returned from FetchTimeSale2")
    else:
        fields = ''
        # do_insert_timesale(timesalelist, fields)
        do_insert_timesale_pw(timesalelist, fields.split(' '))



def Job1():
    if lastruns['timesale'] is None:

        lastruns['timesale'] = datetime.datetime.now()

    diff = (datetime.datetime.now() - lastruns['timesale']).seconds
    if diff >= 10:
        lastruns['timesale'] = datetime.datetime.now()
        # UpdateRunning('TimeSale')
        # TimeSale()


def Job2():
    if lastruns['live'] is None:
        lastruns['live'] = datetime.datetime.now()

    diff = (datetime.datetime.now() - lastruns['live']).seconds
    if diff >= 10:
        lastruns['live'] = datetime.datetime.now()
        # UpdateRunning('LiveStock')
        # LiveStock()


def Job3():
    if lastruns['news'] is None:
        lastruns['news'] = datetime.datetime.now()

    diff = (datetime.datetime.now() - lastruns['news']).seconds
    if diff >= 60:
        lastruns['news'] = datetime.datetime.now()
        # UpdateRunning('News')
        # News()


def Job4():
    if lastruns['obook'] is None:
        lastruns['obook'] = datetime.datetime.now()

    diff = (datetime.datetime.now() - lastruns['obook']).seconds
    if diff >= 10:
        lastruns['obook'] = datetime.datetime.now()
        # UpdateRunning('OBook')
        OBook()


def Process2():
    if len(sys.argv) < 2:
        print('No argument found.. terminating!')
    else:
        cmd = sys.argv[1]
        option = None
        interval = None
        if len(sys.argv) == 4:
            option = sys.argv[2]
            interval = int(sys.argv[3])

        func = None

        if cmd == 'live':
            # func = LiveStock
            pass
        elif cmd == 'bye':
            print('Later!')
        elif cmd == 'help':
            print("Usage:")
            print("%s <cmd> [option]" % sys.argv[0])
            print("Available commands:")
            print("\thelp")
            print("\tlive")
            print("\tnews")
            print("\tobook")
            print("\ttimesale")
            print("\ttest")
            print("\tbye")
            print("Available options:")
            print("\t--loop\t:run continuously")
        elif cmd == 'news':
            # func = News
            pass
        elif cmd == 'obook':
            func = OBook
        elif cmd == 'timesale':
            # func = TimeSale
            pass
        elif cmd == 'test':
            func = test
        else:
            print('unknown command. try help')
        if func:
            if option and interval and option == '--loop':
                func2 = func
                func = Loop(func2, interval)
            func()
